Initialization and Window Management

    mlx_init()
        Initializes the MinilibX library. This function must be called before using any other MinilibX functions.
        Return value: A pointer to the initialized connection, which is used in subsequent function calls.

    mlx_new_window(void *mlx_ptr, int width, int height, char *title)
        Creates a new window with specified width, height, and title.
        Arguments:
            mlx_ptr: The pointer returned by mlx_init().
            width: The window width in pixels.
            height: The window height in pixels.
            title: The window's title as a string.
        Return value: A pointer to the created window.

    mlx_clear_window(void *mlx_ptr, void *win_ptr)
        Clears the contents of the window, essentially resetting it.
        Arguments:
            mlx_ptr: The pointer returned by mlx_init().
            win_ptr: The pointer returned by mlx_new_window().

    mlx_destroy_window(void *mlx_ptr, void *win_ptr)
        Destroys the window and frees resources.
        Arguments:
            mlx_ptr: The pointer returned by mlx_init().
            win_ptr: The pointer returned by mlx_new_window().

Image Handling

    mlx_new_image(void *mlx_ptr, int width, int height)
        Creates a new image object of the specified dimensions.
        Arguments:
            mlx_ptr: The pointer returned by mlx_init().
            width: The image width in pixels.
            height: The image height in pixels.
        Return value: A pointer to the newly created image object.

    mlx_get_data_addr(void *img_ptr, int *bpp, int *size_line, int *endian)
        Retrieves the address of the image's pixel data.
        Arguments:
            img_ptr: The pointer to the image object created by mlx_new_image().
            bpp: The number of bytes per pixel.
            size_line: The size of a line in bytes (the width of the image).
            endian: Endianness of the image data (1 for little-endian, 0 for big-endian).
        Return value: The address of the image's pixel data (which can be modified directly to change pixel values).

    mlx_put_image_to_window(void *mlx_ptr, void *win_ptr, void *img_ptr, int x, int y)
        Puts the image onto the specified window at the given position.
        Arguments:
            mlx_ptr: The pointer returned by mlx_init().
            win_ptr: The pointer returned by mlx_new_window().
            img_ptr: The pointer to the image object.
            x: The x-coordinate of the top-left corner where the image is to be placed.
            y: The y-coordinate of the top-left corner.

    mlx_destroy_image(void *mlx_ptr, void *img_ptr)
        Destroys the image and frees up memory.
        Arguments:
            mlx_ptr: The pointer returned by mlx_init().
            img_ptr: The pointer returned by mlx_new_image().

Color Handling

    mlx_pixel_put(void *mlx_ptr, void *win_ptr, int x, int y, int color)
        Puts a single pixel with the specified color at a given position in the window.
        Arguments:
            mlx_ptr: The pointer returned by mlx_init().
            win_ptr: The pointer returned by mlx_new_window().
            x: The x-coordinate of the pixel.
            y: The y-coordinate of the pixel.
            color: The color to draw (typically encoded as 0xRRGGBB).

    mlx_get_color_value(void *mlx_ptr, int color)
        Converts a color value into a format suitable for the graphics system (this is usually needed for pixel data).
        Arguments:
            mlx_ptr: The pointer returned by mlx_init().
            color: The color value to convert.
        Return value: The converted color value.

Event Handling

    mlx_key_hook(void *win_ptr, int (*funct_ptr)(), void *param)
        Registers a function to be called when a key is pressed in the window.
        Arguments:
            win_ptr: The pointer to the window.
            funct_ptr: A function to call when a key is pressed.
            param: A pointer to any parameters passed to the function.

    mlx_expose_hook(void *win_ptr, int (*funct_ptr)(), void *param)
        Registers a function to be called when the window needs to be redrawn (e.g., when it's resized or uncovered).
        Arguments:
            win_ptr: The pointer to the window.
            funct_ptr: A function to call on expose events.
            param: A pointer to any parameters passed to the function.

    mlx_mouse_hook(void *win_ptr, int (*funct_ptr)(), void *param)
        Registers a function to be called when a mouse event occurs (e.g., click).
        Arguments:
            win_ptr: The pointer to the window.
            funct_ptr: A function to call when a mouse event occurs.
            param: A pointer to any parameters passed to the function.

    mlx_loop(void *mlx_ptr)
        Starts the event loop, which listens for events like key presses, window exposure, etc., and continuously updates the window.
        Arguments:
            mlx_ptr: The pointer returned by mlx_init().

    mlx_loop_hook(void *mlx_ptr, int (*funct_ptr)(), void *param)
        Registers a function to be called at each iteration of the main loop.
        Arguments:
            mlx_ptr: The pointer returned by mlx_init().
            funct_ptr: The function to call in each loop iteration.
            param: A pointer to any parameters passed to the function.

Miscellaneous

    mlx_string_put(void *mlx_ptr, void *win_ptr, int x, int y, int color, char *string)
        Puts a string of text at a specific position in the window.
        Arguments:
            mlx_ptr: The pointer returned by mlx_init().
            win_ptr: The pointer returned by mlx_new_window().
            x: The x-coordinate to place the text.
            y: The y-coordinate to place the text.
            color: The color of the text (typically 0xRRGGBB).
            string: The string to display.

Closing the Application

    mlx_destroy_display(void *mlx_ptr)
        Destroys the display connection and frees up resources.
        Arguments:
            mlx_ptr: The pointer returned by mlx_init().
